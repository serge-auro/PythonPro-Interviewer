import telebot
from config import BOT_TOKEN
import time
import logging
from telebot import types
import threading
from backend import (init_user as backend_init_user, get_report as backend_get_report, skip_timer as backend_skip_timer,
                     get_question as backend_get_question, process_answer as backend_process_answer, update_user_stat,
                     clear_user_stat as be_clear_user_stat)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}

# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
logging.info("PythonPro Interviewer is being started")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            bot.stop_polling()
            time.sleep(5)  # –î–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            if args and args[0] and hasattr(args[0], 'chat'):
                handle_start(args[0])  # –í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@error_handler
def handle_start(message):
    user_id = message.from_user.id
    backend_init_user(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à –±–æ—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ Python")
    show_menu(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_start_interview = types.KeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    button_request_report = types.KeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç")
    button_reset_result = types.KeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    button_description = types.KeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞")

    markup.add(button_start_interview, button_request_report, button_reset_result, button_description)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
@error_handler
def start_interview(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_end_interview = types.KeyboardButton("‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(button_end_interview)

    question = backend_get_question(user_id)
    question_id = question['id']

    if isinstance(question, dict) and "name" in question and "id" in question:
        user_states[user_id] = ("waiting_for_answer", question)
        bot.send_message(user_id, question["name"], reply_markup=markup)
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        threading.Thread(target=go_to_next_question_after_timer, args=(user_id, question_id)).start()

    else:
        bot.send_message(user_id, "–ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–≤—è–∑—å—é... –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.")

@error_handler
def go_to_next_question_after_timer(user_id, question_id):
    time.sleep(120)
    if user_states.get(user_id) and user_states[user_id][1]['id'] == question_id and user_states[user_id][0] == "waiting_for_answer":
        bot.send_message(user_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
        user_states[user_id] = ("menu", None)
        # –ó–∞–ø–∏—Å—å –≤ user_stat, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        update_user_stat(user_id, question_id, 0)
        show_menu(user_id)
        user_states[user_id] = ("menu", None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@error_handler
def handle_answer(message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)

    if user_state and user_state[0] == "waiting_for_answer":
        question = user_state[1]
        if message.content_type == 'text':
            user_response = message.text
            response_type = "text"
        elif message.content_type == 'voice':
            try:
                # file_info = bot.get_file(message.voice.file_id)
                # file = bot.download_file(file_info.file_path)
                # user_response = file  # –ó–¥–µ—Å—å –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Ç—å –∫ –Ω–µ–º—É
                file_id = message.voice.file_id
                logging.info(f"Requesting file id: {file_id}")
                user_response = file_id
                response_type = "audio"
                # bot.send_message(user_id, "–î—É–º–∞—é...")
            except Exception as e:
                logging.info(f"handle_answer 1: {e} ")
                bot.send_message(user_id, "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        else:
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç.")
            return

        bot.send_message(user_id, "–í–∞—Å –ø–æ–Ω—è–ª, —Å–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é...")
        try:
            result, comment = backend_process_answer(user_id, user_response, response_type)  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
            bot.send_message(user_id, result)
            bot.send_message(user_id, comment)

            # # –ó–∞–ø–∏—Å—å –≤ user_stat, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
            # if result.lower() == "–≤–µ—Ä–Ω–æ":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "–í–µ—Ä–Ω–æ"
            #     update_user_stat(user_id, question['id'], 1)
        except Exception as e:
            logging.info(f"handle_answer 2: {e} ")
            bot.send_message(user_id, "–ú–∏—Å—Å–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        show_menu(user_id)
        user_states[user_id] = ("menu", None)
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@error_handler
def skip_question(user_id):
    backend_skip_timer(user_id)
    show_menu(user_id)

@error_handler
def clear_user_stat(user_id):
    be_clear_user_stat(user_id)
    show_menu(user_id)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
commands = {
    "üöÄ –°—Ç–∞—Ä—Ç": handle_start,
    "üöÄ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å": lambda message: start_interview(message.from_user.id),
    "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç": lambda message: bot.send_message(message.from_user.id, backend_get_report(message.from_user.id)),
    "üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç": lambda message: (
        clear_user_stat(message.from_user.id),
        bot.send_message(message.from_user.id, "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.")
    ),
    "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞": lambda message: bot.send_message(message.from_user.id, "–Ø - –≤–∞—à –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Python."),
    "‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å": lambda message: skip_question(message.from_user.id)
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
@error_handler
def handle_text(message):
    user_id = message.from_user.id
    if message.text in commands:
        commands[message.text](message)
    elif user_states.get(user_id) and user_states[user_id][0] == "waiting_for_answer":
        handle_answer(message)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

@bot.message_handler(content_types=['text', 'voice'])
@error_handler
def handle_text_and_voice(message):
    user_id = message.from_user.id

    if message.content_type == 'text' and message.text in commands:
        commands[message.text](message)
    elif user_states.get(user_id) and user_states[user_id][0] == "waiting_for_answer":
        handle_answer(message)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        time.sleep(1)
