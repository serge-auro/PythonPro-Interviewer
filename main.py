import telebot
from config import BOT_TOKEN
import time
import logging
from datetime import datetime, timedelta
import sqlite3
from telebot import types
from backend import (init_user as backend_init_user, get_report as backend_get_report, skip_timer as backend_skip_timer,
                     get_question as backend_get_question, process_answer as backend_process_answer)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}

# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
logging.info("PythonPro Interviewer is being started")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"Error in {func.__name__}: {e}")
            bot.stop_polling()
            time.sleep(5)  # –î–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            if args and args[0]:
                handle_start(args[0])  # –í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é

    return wrapper


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@error_handler
def handle_start(message):
    user_id = message.from_user.id
    backend_init_user(user_id)
    bot.send_message(user_id, "–Ø —Ç–≤–æ–π –±–æ—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ Python")
    show_menu(user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_start_interview = types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    button_request_report = types.KeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç")
    button_reset_result = types.KeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    button_description = types.KeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞")

    markup.add(button_start_interview, button_request_report, button_reset_result, button_description)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
@error_handler
def start_interview(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_end_interview = types.KeyboardButton("‚õîÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    markup.add(button_end_interview)

    question = backend_get_question(user_id)
    user_states[user_id] = "waiting_for_answer"
    bot.send_message(user_id, question["name"], reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@error_handler
def handle_answer(message):
    user_id = message.from_user.id
    if user_states.get(user_id) == "waiting_for_answer":
        if message.content_type == 'text':
            user_response = message.text
            response_type = "text"
        elif message.content_type == 'voice':
            file_info = bot.get_file(message.voice.file_id)
            file = bot.download_file(file_info.file_path)
            user_response = file  # –ó–¥–µ—Å—å –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Ç—å –∫ –Ω–µ–º—É
            response_type = "audio"
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ.")
            return

        bot.send_message(user_id, "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç...")
        backend_process_answer(user_id, user_response, response_type)  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        show_menu(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@error_handler
def skip_question(user_id):
    backend_skip_timer(user_id)
    show_menu(user_id)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
commands = {
    "üöÄ –°—Ç–∞—Ä—Ç": handle_start,
    "üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é": start_interview,
    "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç": lambda user_id: bot.send_message(user_id, backend_get_report(user_id)),
    "üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç": lambda user_id: bot.send_message(user_id, "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ–±–Ω—É–ª–µ–Ω."),
    "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞": lambda user_id: bot.send_message(user_id,
                                                         "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Python."),
    "‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å": lambda user_id: skip_question(user_id)
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
@error_handler
def handle_text(message):
    user_id = message.from_user.id
    if message.text in commands:
        commands[message.text](user_id)
    elif user_states.get(user_id) == "waiting_for_answer":
        handle_answer(message)
    else:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Error: {e}")
        time.sleep(1)
