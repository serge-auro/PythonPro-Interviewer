import telebot
from config import BOT_TOKEN
import time
from datetime import datetime
import sqlite3
from datetime import datetime
from datetime import timedelta
from telebot import types
from backend import (init_user as backend_init_user, get_report as backend_get_report, skip_timer as backend_skip_timer,
                     get_question as backend_get_question, get_answer as backend_get_answer)


bot = telebot.TeleBot(BOT_TOKEN)


# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
print("PythonPro Interviewer is being started", datetime.now())
# TYPE = ("text", "audio", "empty")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
            print(f"Error in {func.__name__}: {e}")
            bot.stop_polling()
            time.sleep(5)  # –î–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            if args and args[0]:
                handle_start(args[0])  # –í—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@error_handler
def handle_start(message):
    user_id = message.from_user.id
    backend_init_user(user_id)
    bot.send_message(user_id, "–Ø —Ç–≤–æ–π –±–æ—Ç-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –ø–æ Python")
    show_menu(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_menu(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_start_interview = types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    button_request_report = types.KeyboardButton("üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç")
    button_reset_result = types.KeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    button_description = types.KeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞")

    markup.add(button_start_interview, button_request_report, button_reset_result, button_description)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
def show_end_interview_menu(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_end_interview = types.KeyboardButton("‚õîÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    markup.add(button_end_interview)
    bot.send_message(user_id, "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å. –î–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é'.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
@error_handler
def handle_text(message):
    user_id = message.from_user.id
    if message.text == "üöÄ –°—Ç–∞—Ä—Ç":
        bot.send_message(user_id, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        backend_init_user(user_id)
        bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    elif message.text == "üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é":
        bot.send_message(user_id, "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
        show_end_interview_menu(user_id)
        handle_question(message)
    elif message.text == "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç—á–µ—Ç":
        bot.send_message(user_id, "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        report = backend_get_report(user_id)
        bot.send_message(user_id, report)
    elif message.text == "üîÑ –û–±–Ω—É–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
        # TODO clear_result
        bot.send_message(user_id, "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.")
    elif message.text == "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞":
        bot.send_message(user_id, "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ Python.")
    elif message.text == "‚õîÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        backend_skip_timer(user_id)
        bot.send_message(user_id, "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–∫–æ–Ω—á–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é.")
        show_menu(user_id)
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
def handle_question(message):
    user_id = message.from_user.id
    question = backend_get_question(user_id)

    answers = []
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç\–∞—É–¥–∏–æ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–≤ backend_get_answer –Ω–∏–∂–µ
    for text, callback_data in backend_get_answer(question["name"], "—á—Ç–æ-—Ç–æ —É–º–Ω–æ–µ", "text"):
        answers.append((text, callback_data))

    markup = types.InlineKeyboardMarkup(row_width=1)
    for text, callback_data in answers:
        markup.add(types.InlineKeyboardButton(text, callback_data=callback_data))

    bot.send_message(user_id, question["name"], reply_markup=markup)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Error: {e}")
        time.sleep(1)
